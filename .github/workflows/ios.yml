name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install iOS 18.2 Simulator
        run: |
          echo "Installing iOS 18.2 Simulator..."
          sudo xcode-select --switch /Applications/Xcode_16.2.app/Contents/Developer
          sudo xcodebuild -runFirstLaunch
          
          # Download specific platform (iOS 18.2)
          sudo xcodebuild -downloadPlatform iOS

      - name: Debug Available Simulators
        run: |
          echo "Available iOS Simulators:"
          xcrun xctrace list devices 2>&1 | grep -E 'iPhone.*\([0-9.]+.*\)'

      - name: Select iPhone 16 Pro Simulator (18.2)
        run: |
          # Explicitly select the iPhone 16 Pro Simulator with OS 18.2
          device=$(xcrun xctrace list devices 2>&1 | grep "iPhone 16 Pro.*18.2" | head -1 | sed -E 's/ *\([^)]*\)//g')
          if [[ -z "$device" ]]; then
            echo "Error: No available iPhone simulators found!"
            exit 1
          fi
          echo "Selected Simulator: $device"
          echo "SIMULATOR_DEVICE=$device" >> $GITHUB_ENV

      - name: Set Default Scheme
        working-directory: ios-assignment
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]" || echo "")

          if [[ -z "$default" ]]; then
            echo "Error: No default scheme found!"
            exit 1
          fi

          echo $default > $GITHUB_WORKSPACE/default
          echo "Using default scheme: $default"

      - name: Debug Scheme
        run: |
          echo "Checking scheme value..."
          scheme=$(cat $GITHUB_WORKSPACE/default)
          if [[ -z "$scheme" ]]; then
            echo "Error: Scheme is empty!"
            exit 1
          fi
          echo "Using scheme: $scheme"

      - name: Debug Xcode Project
        working-directory: ios-assignment
        run: |
          echo "Checking for .xcworkspace or .xcodeproj..."
          ls -A | grep -i "\\.xcworkspace$" && echo "Found workspace" || echo "No workspace found"
          ls -A | grep -i "\\.xcodeproj$" && echo "Successfully found project" || echo "No project found"

      - name: Debug Project Files
        working-directory: ios-assignment
        run: |
          echo "Listing project files:"
          ls -A

      - name: Boot all available iPhone simulators
        run: |
            echo "Booting the first available iPhone 16 simulator with OS 18.2..."
            
            # List all available iPhone simulators that are in 'Shutdown' state
            simulator=$(xcrun simctl list devices | grep -E 'iPhone 16' | grep 'Shutdown' | head -n 1)
              echo "Processing simulator: $simulator"

            # If no simulator is found, print an error and exit
            if [[ -z "$simulator" ]]; then
              echo "Error: No available iPhone 16 simulators in 'Shutdown' state!"
              exit 1
            fi

            echo "Processing simulator: $simulator"
            
            # Extract the device ID (UUID) for the simulator
            device_id=$(echo "$simulator" | sed -E 's/.*\(([A-F0-9\-]+)\).*/\1/')
            
            # Debug: Print the extracted device ID
            echo "Extracting device id: $device_id"
            
            # Check if device_id is empty or invalid
            if [[ -z "$device_id" ]]; then
              echo "Error: No valid device ID found for simulator: $simulator"
              continue
            fi
            
            # Attempt to boot the simulator
            echo "Attempting to boot simulator with ID: $device_id"
            
            # Wait for the simulator to be fully booted
            MAX_RETRIES=3
            RETRY_COUNT=0
            while [[ $RETRY_COUNT -lt $MAX_RETRIES ]]; do

              xcrun simctl boot "$device_id"
    
              # Wait a few seconds for the simulator to boot
              sleep 5

              boot_status=$(xcrun simctl list devices | grep "$device_id" | grep 'Booted')
              
              if [[ -n "$boot_status" ]]; then
              echo "Simulator $simulator successfully booted."
              break
              else
                echo "Failed to boot simulator $simulator. Retrying..."
                RETRY_COUNT=$((RETRY_COUNT+1))
              fi
            done

            # If it failed after retries, exit with an error
            if [[ $RETRY_COUNT -eq $MAX_RETRIES ]]; then
              echo "Error: Simulator $simulator failed to boot after $MAX_RETRIES attempts."
              exit 1
            fi

            # Once booted, proceed to the next step
            echo "Simulator $simulator is successfully booted. Proceeding with the next step..."
          
      - name: List all available iPhone simulators with OS 18.2
        run: |
          echo "Listing all available iPhone simulators with OS 18.2..."
          
          # Now filter for iPhone simulators with OS 18.2
          available_devices=$(xcrun simctl list devices | grep -E 'iPhone' | grep -E '(Booted)')
          echo "Available devices found: $available_devices"
          
          if [[ -z "$available_devices" ]]; then
            echo "No iPhone simulators found with OS 18.2, falling back to 18.1."
            available_devices=$(xcrun simctl list devices | grep -E 'iPhone' | grep '18.1')

            if [[ -z "$available_devices" ]]; then
              echo "Error: No iPhone simulators found with iOS 18.1 either!"
              exit 1
            fi
          fi
          
          echo "Available simulators found: $available_devices"

      - name: Build
        working-directory: ios-assignment
        env:
          platform: iOS Simulator
        run: |
          scheme=$(cat $GITHUB_WORKSPACE/default)

          if [[ -z "$scheme" ]]; then
            echo "Error: Scheme is empty!"
            exit 1
          fi

          file_to_build=""
          if [[ -n "$(ls -A | grep -i \\.xcworkspace\$)" ]]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"
          elif [[ -n "$(ls -A | grep -i \\.xcodeproj\$)" ]]; then
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"
          else
            echo "Error: No .xcworkspace or .xcodeproj found!"
            exit 1
          fi

          # Debug: List available iOS devices with OS 18.2 and exclude non-iOS devices like TV and Watch
          echo "Listing all available iOS 18.2 devices:"

          available_devices=$(xcrun simctl list devices | grep 'iPhone 16' | grep '(Booted)')
          echo "Available devices: $available_devices"

          # Dynamically find the simulator ID for an available iPhone 16 (18.2) that is Booted
          SIMULATOR_ID=$(echo "$available_devices" | sed -E 's/.*\(([A-Za-z0-9\-]+)\).*/\1/' | head -n 1)

          echo "Found available simulator with id: $SIMULATOR_ID"

          # Debug: Print the simulator ID
          if [[ -z "$SIMULATOR_ID" ]]; then
            echo "Error: No matching iPhone 16 simulator with OS 18.2 found!"
            exit 1
          fi

          echo "Using simulator ID: $SIMULATOR_ID"

          # If the device is Shutdown, boot it
          SIMULATOR_STATE=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | sed 's/.*(\(.*\)).*/\1/')
          if [[ "$SIMULATOR_STATE" == "Shutdown" ]]; then
            echo "Simulator is in Shutdown state. Attempting to boot the simulator..."
            xcrun simctl boot "$SIMULATOR_ID"
            sleep 15  # Allow time for the simulator to boot
          fi

          # Ensure simulator is booted
          SIMULATOR_STATE=$(xcrun simctl list devices | grep "$SIMULATOR_ID" | sed 's/.*(\(.*\)).*/\1/')
          if [[ "$SIMULATOR_STATE" != "Booted" ]]; then
            echo "Error: Simulator failed to boot up properly!"
            exit 1
          fi

          # Run xcodebuild using the dynamically fetched simulator ID
          echo "Building with simulator: iPhone 16 Pro Simulator (18.2)"
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,id=$SIMULATOR_ID,OS=18.2"

      - name: Test
        env:
          platform: iOS Simulator
        run: |
          scheme=$(cat $GITHUB_WORKSPACE/default)

          if [[ -z "$scheme" ]]; then
            echo "Error: Scheme is empty!"
            exit 1
          fi

          file_to_build=""
          if [[ -n "$(ls -A | grep -i \\.xcworkspace\$)" ]]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"
          elif [[ -n "$(ls -A | grep -i \\.xcodeproj\$)" ]]; then
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"
          else
            echo "Error: No .xcworkspace or .xcodeproj found!"
            exit 1
          fi

          echo "Testing with simulator: $SIMULATOR_DEVICE"
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$SIMULATOR_DEVICE"
