name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Install iOS 18.2 Simulator
        run: |
          echo "Installing iOS 18.2 Simulator..."
          sudo xcode-select --switch /Applications/Xcode_16.2.app/Contents/Developer
          sudo xcodebuild -runFirstLaunch
          
          # Download specific platform (iOS 18.2)
          sudo xcodebuild -downloadPlatform iOS

      - name: Debug Available Simulators
        run: |
          echo "Available iOS Simulators:"
          xcrun xctrace list devices 2>&1 | grep -E 'iPhone.*\([0-9.]+.*\)'

      - name: Select iPhone 16 Pro Simulator (18.2)
        run: |
          # Explicitly select the iPhone 16 Pro Simulator with OS 18.2
          device=$(xcrun xctrace list devices 2>&1 | grep "iPhone 16 Pro.*18.2" | head -1 | sed -E 's/ *\([^)]*\)//g')
          if [[ -z "$device" ]]; then
            echo "Error: No available iPhone simulators found!"
            exit 1
          fi
          echo "Selected Simulator: $device"
          echo "SIMULATOR_DEVICE=$device" >> $GITHUB_ENV

      - name: Set Default Scheme
        working-directory: ios-assignment
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]" || echo "")

          if [[ -z "$default" ]]; then
            echo "Error: No default scheme found!"
            exit 1
          fi

          echo $default > $GITHUB_WORKSPACE/default
          echo "Using default scheme: $default"

      - name: Debug Scheme
        run: |
          echo "Checking scheme value..."
          scheme=$(cat $GITHUB_WORKSPACE/default)
          if [[ -z "$scheme" ]]; then
            echo "Error: Scheme is empty!"
            exit 1
          fi
          echo "Using scheme: $scheme"

      - name: Debug Xcode Project
        working-directory: ios-assignment
        run: |
          echo "Checking for .xcworkspace or .xcodeproj..."
          ls -A | grep -i "\\.xcworkspace$" && echo "Found workspace" || echo "No workspace found"
          ls -A | grep -i "\\.xcodeproj$" && echo "Found project" || echo "No project found"

      - name: Debug Project Files
        working-directory: ios-assignment
        run: |
          echo "Listing project files:"
          ls -A

      - name: Build
        working-directory: ios-assignment
        env:
          platform: iOS Simulator
        run: |
          scheme=$(cat $GITHUB_WORKSPACE/default)

          if [[ -z "$scheme" ]]; then
            echo "Error: Scheme is empty!"
            exit 1
          fi

          file_to_build=""
          if [[ -n "$(ls -A | grep -i \\.xcworkspace\$)" ]]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"
          elif [[ -n "$(ls -A | grep -i \\.xcodeproj\$)" ]]; then
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"
          else
            echo "Error: No .xcworkspace or .xcodeproj found!"
            exit 1
          fi

          # Debug: List all available devices and OS versions
          echo "Listing all available iOS devices:"
          xcrun simctl list devices

          # Debug: List available devices with OS 18.2
          echo "Available iOS devices with OS 18.2:"
          xcrun simctl list devices | grep "iPhone 16.*18.2"

          # Dynamically find the simulator ID for iPhone 16 (18.2) that is shutdown
          SIMULATOR_ID=$(xcrun simctl list devices | grep -E "iPhone 16.*18.2" | grep "(Shutdown)" | sed -E 's/.*\(([A-Za-z0-9\-]+)\).*/\1/' | head -n 1)

          # Debug: Print the simulator ID
          if [[ -z "$SIMULATOR_ID" ]]; then
            echo "Error: No matching iPhone 16 simulator with OS 18.2 found!"
            exit 1
          fi

          echo "Using simulator ID: $SIMULATOR_ID"
          echo "Starting the simulator..."

          # Start the simulator (if it is shutdown)
          xcrun simctl boot "$SIMULATOR_ID"

          # Wait for the simulator to be ready (may take a few seconds)
          echo "Waiting for the simulator to boot up..."
          sleep 10

          # Run xcodebuild using the dynamically fetched simulator ID
          echo "Building with simulator: iPhone 16 Pro Simulator (18.2)"
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=iOS Simulator,id=$SIMULATOR_ID,OS=18.2"


      - name: Test
        env:
          platform: iOS Simulator
        run: |
          scheme=$(cat $GITHUB_WORKSPACE/default)

          if [[ -z "$scheme" ]]; then
            echo "Error: Scheme is empty!"
            exit 1
          fi

          file_to_build=""
          if [[ -n "$(ls -A | grep -i \\.xcworkspace\$)" ]]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"
          elif [[ -n "$(ls -A | grep -i \\.xcodeproj\$)" ]]; then
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"
          else
            echo "Error: No .xcworkspace or .xcodeproj found!"
            exit 1
          fi

          echo "Testing with simulator: $SIMULATOR_DEVICE"
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$SIMULATOR_DEVICE"
