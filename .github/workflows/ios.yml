name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
          
      - name: Debug Directory Structure
        run: |
          echo "Listing root directory:"
          ls -la
          
      - name: Check if Xcode project exists
        run: |
          echo "Current directory is: $(pwd)"
          echo "Listing files in the current directory:"
          ls -la
          echo "Navigating to ios-assignment directory:"
          cd ios-assignment || exit 1
          echo "Current directory is: $(pwd)"
          echo "Listing files in the current directory:"
          ls -la
          
      - name: Set Default Scheme
        working-directory: ios-assignment
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          echo $default | cat >default
          echo "Using default scheme: $default"
          echo "Verifying default file contents:"
          cat default
          echo "Listing files in ios-assignment directory after creating default file:"
          ls -la
          
      - name: Debug Default File Before Build
        working-directory: ios-assignment
        run: |
          echo "Checking if 'default' file exists before build..."
          ls -la
          cat default || echo "Error: 'default' file not found!"

      - name: Build
        working-directory: ios-assignment
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          
          echo "Checking if 'default' file exists before reading..."
          ls -la
          if [ -f "default" ]; then
            echo "File exists, reading scheme..."
            scheme=$(cat default)
          else
            echo "Error: 'default' file not found!"
            exit 1
          fi

          echo "Using scheme: $scheme"

          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then 
            filetype_parameter="workspace"
            file_to_build="`ls -A | grep -i \\.xcworkspace\$`"
          else 
            filetype_parameter="project"
            file_to_build="`ls -A | grep -i \\.xcodeproj\$`"
          fi

          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "Building file: $file_to_build"
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

      - name: Test
        working-directory: ios-assignment
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          # xcrun xctrace returns via stderr, not the expected stdout (see https://developer.apple.com/forums/thread/663959)
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          
          echo "Checking if 'default' file exists before test..."
          ls -la
          if [ -f "default" ]; then
            echo "File exists, reading scheme..."
            scheme=$(cat default)
          else
            echo "Error: 'default' file not found!"
            exit 1
          fi

          echo "Using scheme: $scheme"

          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then 
            filetype_parameter="workspace"
            file_to_build="`ls -A | grep -i \\.xcworkspace\$`"
          else 
            filetype_parameter="project"
            file_to_build="`ls -A | grep -i \\.xcodeproj\$`"
          fi

          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          echo "Testing file: $file_to_build"
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
