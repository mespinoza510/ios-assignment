name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Debug Directory Structure
        run: |
          echo "Listing root directory:"
          ls -la
          echo "Navigating to ios-assignment/ios-assignment directory:"
          cd ios-assignment/ios-assignment || exit 1
          ls -la
          
      - name: Check if Xcode project exists
        run: |
          echo "Current directory is: $(pwd)"
          echo "Listing files in the current directory:"
          ls -la

          echo "Checking for ios-assignment.xcodeproj in the current directory:"
          if [ -f "ios-assignment.xcodeproj" ]; then
            echo "Found ios-assignment.xcodeproj in the current directory"
          else
            echo "ios-assignment.xcodeproj does not exist in the current directory"
            exit 1
          fi

      - name: Set Default Scheme
        run: |
          echo "Running xcodebuild -list to fetch schemes..."
          scheme_list=$(xcodebuild -list -json -project ios-assignment.xcodeproj 2>&1)
          echo "Scheme list output: $scheme_list"
          
          if [[ "$scheme_list" == *"error"* ]]; then
            echo "Error fetching schemes. Exiting."
            exit 1
          fi

          # Extract the first target as the default scheme
          default=$(echo $scheme_list | ruby -e "require 'json'; data = JSON.parse(STDIN.read); puts data['project']['targets'][0]")

          if [ -z "$default" ]; then
            echo "No default scheme found."
            exit 1
          fi

          echo $default > default
          echo "Using default scheme: $default"

      - name: Build
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          echo "Building with scheme $scheme"
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"

      - name: Test
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          echo "Testing with scheme $scheme"
          device=`xcrun xctrace list devices 2>&1 | grep -oE 'iPhone.*?[^\(]+' | head -1 | awk '{$1=$1;print}' | sed -e "s/ Simulator$//"`
          if [ $scheme = default ]; then scheme=$(cat default); fi
          if [ "`ls -A | grep -i \\.xcworkspace\$`" ]; then filetype_parameter="workspace" && file_to_build="`ls -A | grep -i \\.xcworkspace\$`"; else filetype_parameter="project" && file_to_build="`ls -A | grep -i \\.xcodeproj\$`"; fi
          file_to_build=`echo $file_to_build | awk '{$1=$1;print}'`
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device"
