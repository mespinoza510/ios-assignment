name: iOS starter workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    name: Build and Test default scheme using any available iPhone simulator
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable

      - name: Debug Available Simulators
        run: |
          echo "Available iOS Simulators:"
          xcrun xctrace list devices 2>&1 | grep -E 'iPhone.*\([0-9.]+.*\)'

      - name: Select an Available Simulator
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -E 'iPhone.*\([0-9.]+.*\)' | head -1 | sed -E 's/ *\([^)]*\)//g')
          if [[ -z "$device" ]]; then
            echo "Error: No available iPhone simulators found!"
            exit 1
          fi
          echo "Selected Simulator: $device"
          echo "SIMULATOR_DEVICE=$device" >> $GITHUB_ENV

      - name: Set Default Scheme
        working-directory: ios-assignment
        run: |
          scheme_list=$(xcodebuild -list -json | tr -d "\n")
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['targets'][0]")
          
          if [[ -z "$default" ]]; then
            echo "Error: Could not determine default scheme!"
            exit 1
          fi

          echo $default > default
          echo "Using default scheme: $default"
          echo "SCHEME=$default" >> $GITHUB_ENV  # Store scheme as GitHub Actions variable

      - name: Build
        env:
          scheme: ${{ env.SCHEME }}
          platform: iOS Simulator
        run: |
          if [[ -z "$scheme" ]]; then
            echo "Error: Scheme is empty!"
            exit 1
          fi

          file_to_build=""
          if [[ -n "$(ls -A | grep -i \\.xcworkspace\$)" ]]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"
          fi

          if [[ -z "$file_to_build" ]]; then
            echo "Error: No .xcworkspace or .xcodeproj found!"
            exit 1
          fi

          echo "Building with simulator: $SIMULATOR_DEVICE"
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$SIMULATOR_DEVICE"

      - name: Test
        env:
          scheme: ${{ env.SCHEME }}
          platform: iOS Simulator
        run: |
          if [[ -z "$scheme" ]]; then
            echo "Error: Scheme is empty!"
            exit 1
          fi

          file_to_build=""
          if [[ -n "$(ls -A | grep -i \\.xcworkspace\$)" ]]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \\.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \\.xcodeproj\$)"
          fi

          if [[ -z "$file_to_build" ]]; then
            echo "Error: No .xcworkspace or .xcodeproj found!"
            exit 1
          fi

          echo "Testing with simulator: $SIMULATOR_DEVICE"
          xcodebuild test-without-building -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$SIMULATOR_DEVICE"
